[{"instance_id": "scikit-learn__scikit-learn-13497", "model_patch": "```diff\ndiff --git a/sklearn/feature_selection/_mutual_info.py b/sklearn/feature_selection/_mutual_info.py\n--- a/sklearn/feature_selection/_mutual_info.py\n+++ b/sklearn/feature_selection/_mutual_info.py\n@@ -257,7 +257,7 @@ def _estimate_mi(X, y, discrete_features='auto', *,\n         raise ValueError(\"Invalid type for discrete_features. Must be boolean, an array of indices, or 'auto'.\")\n\n     if discrete_features == 'auto':\n-        discrete_features = np.arange(X.shape[1])\n+        discrete_features = np.arange(X.shape[1]) if not isinstance(X, (list, np.ndarray)) else discrete_features\n\n     # Further implementation ...\n```\n", "model_name_or_path": "model-1"}, {"instance_id": "astropy__astropy-7746", "model_patch": "```diff\ndiff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1290,6 +1290,12 @@\n         if len(axes) == 0:\n             return []\n \n+        if all(len(a) == 0 for a in axes):\n+            return [np.array([]) for _ in range(len(axes))]\n+\n         if ra_dec_order and sky == 'input':\n             xy = self._denormalize_sky(xy)\n \n@@ -1303,6 +1309\n         output = func(xy, origin)\n \n+        if len(output) == 0:\n+            return [np.array([]) for _ in range(len(output))]\n+\n         if ra_dec_order and sky == 'output':\n             output = self._normalize_sky(output)\n```", "model_name_or_path": "model-1"}, {"instance_id": "django__django-12915", "model_patch": "```diff\ndiff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 8a1a8c1..2f3f1b4 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -53,6 +53,21 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n \n     async def __call__(self, scope, receive, send):\n         return await super().__call__(scope, receive, send)\n+\n+    async def get_response_async(self, request):\n+        \"\"\"\n+        Asynchronously receives a request and returns the appropriate response.\n+        \"\"\"\n+        response = await super().get_response(request)\n+        if response is None:\n+            response = self.http_response_not_found()\n+        return response\n+\n+    def http_response_not_found(self):\n+        # Handle the case where the response is not found\n+        from django.http import HttpResponseNotFound\n+        return HttpResponseNotFound(\"File not found.\")\n```\n```", "model_name_or_path": "model-1"}, {"instance_id": "django__django-17087", "model_patch": "```diff\ndiff --git a/appname/models.py b/appname/models.py\n--- a/appname/models.py\n+++ b/appname/models.py\n@@ -5,7 +5,7 @@ class Profile(models.Model):\n \t\tBASIC = (\"BASIC\", \"Basic\")\n \t\tPROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n \n-\t\t@classmethod\n+\t\t@classmethod \n \t\tdef default(cls) -> list[str]:\n \t\t\treturn [cls.BASIC]\n \tcapabilities = ArrayField(\n@@ -8,7 +8,7 @@ class Profile(models.Model):\n \tcapabilities = ArrayField(\n-\t\tmodels.CharField(choices=Capability.choices, max_length=30, blank=True),\n+\t\tmodels.CharField(choices=Capability.choices, max_length=30, blank=True), \n \t\tnull=True,\n-\t\tdefault=Capability.default\n+\t\tdefault=Profile.Capability.default\n \t)\n```", "model_name_or_path": "model-1"}, {"instance_id": "sympy__sympy-23191", "model_patch": "```diff\ndiff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py\n--- a/sympy/vector/tests/test_printing.py\n+++ b/sympy/vector/tests/test_printing.py\n@@ -3,7 +3,7 @@\n from sympy.integrals.integrals import Integral\n from sympy.printing.latex import latex\n from sympy.printing.pretty import pretty as xpretty\n-from sympy.vector import CoordSys3D, Vector, express\n+from sympy.vector import CoordSys3D, Del, Vector, express\n from sympy.abc import a, b, c\n from sympy.testing.pytest import XFAIL\n \n@@ -160,6 +160,55 @@ def test_latex_printing():\n                             '\\\\mathbf{\\\\hat{k}_{N}}{\\\\middle|}\\\\mathbf{' +\n                             '\\\\hat{k}_{N}}\\\\right)')\n \n+def test_issue_23058():\n+    from sympy import symbols, sin, cos, pi, UnevaluatedExpr\n+\n+    delop = Del()\n+    CC_   = CoordSys3D(\"C\")\n+    y     = CC_.y\n+    xhat  = CC_.i\n+\n+    t = symbols(\"t\")\n+    ten = symbols(\"10\", positive=True)\n+    eps, mu = 4*pi*ten**(-11), ten**(-5)\n+\n+    Bx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * y)\n+    vecB = Bx * xhat\n+    vecE = (1/eps) * Integral(delop.cross(vecB/mu).doit(), t)\n+    vecE = vecE.doit()\n+\n+    vecB_str = \"\"\"\\\n+\u239b     \u239by_C\u239e    \u239b  5  \u239e\u239e    \\n\\\n+\u239c2\u22c5sin\u239c\u2500\u2500\u2500\u239f\u22c5cos\u239d10 \u22c5t\u23a0\u239f i_C\\n\\\n+\u239c     \u239c  3\u239f           \u239f    \\n\\\n+\u239c     \u239d10 \u23a0           \u239f    \\n\\\n+\u239c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f    \\n\\\n+\u239c           4         \u239f    \\n\\\n+\u239d         10          \u23a0    \\\n+\"\"\"\n+    vecE_str = \"\"\"\\\n+\u239b   4    \u239b  5  \u239e    \u239by_C\u239e \u239e    \\n\\\n+\u239c-10 \u22c5sin\u239d10 \u22c5t\u23a0\u22c5cos\u239c\u2500\u2500\u2500\u239f \u239f k_C\\n\\\n+\u239c                   \u239c  3\u239f \u239f    \\n\\\n+\u239c                   \u239d10 \u23a0 \u239f    \\n\\\n+\u239c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f    \\n\\\n+\u239d           2\u22c5\u03c0           \u23a0    \\\n+\"\"\"\n+\n+    assert upretty(vecB) == vecB_str\n+    assert upretty(vecE) == vecE_str\n+\n+    ten = UnevaluatedExpr(10)\n+    eps, mu = 4*pi*ten**(-11), ten**(-5)\n+\n+    Bx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * y)\n+    vecB = Bx * xhat\n+\n+    vecB_str = \"\"\"\\\n+\u239b    -4    \u239b    5\u239e    \u239b      -3\u239e\u239e     \\n\\\n+\u239d2\u22c510  \u22c5cos\u239dt\u22c510 \u23a0\u22c5sin\u239dy_C\u22c510  \u23a0\u23a0 i_C \\\n+\"\"\"\n+    assert upretty(vecB) == vecB_str\n \n def test_custom_names():\n     A = CoordSys3D('A', vector_names=['x', 'y', 'z'],\n```", "model_name_or_path": "model-1"}, {"instance_id": "sphinx-doc__sphinx-8435", "model_patch": "```diff\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -293,6 +293,8 @@ class AttributeDocumenter(ObjectDocumenter):\n         # Retrieve the original type if it exists\n         if self.object and hasattr(self.object, '__annotations__'):\n             type_hint = self.object.__annotations__.get(self.name)\n+            if type_hint in self.env.app.config.autodoc_type_aliases:\n+                type_hint = self.env.app.config.autodoc_type_aliases[type_hint]\n             if type_hint is not None:\n                 self._type = type_hint\n \n@@ -407,6 +409,8 @@ class VariableDocumenter(ObjectDocumenter):\n         if self.object and hasattr(self.object, '__annotations__'):\n             type_hint = self.object.__annotations__.get(self.name)\n+            if type_hint in self.env.app.config.autodoc_type_aliases:\n+                type_hint = self.env.app.config.autodoc_type_aliases[type_hint]\n             if type_hint is not None:\n                 self._type = type_hint\n```", "model_name_or_path": "model-1"}, {"instance_id": "django__django-11019", "model_patch": "```diff\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -145,17 +145,17 @@\n             warnings.warn(\n                 \"Detected duplicate Media files in an opposite order:\\n%s\" % '\\n'.join(duplicates),\n                 MediaOrderConflictWarning,\n             )\n-        return Media(css=self.css, js=self.js + list(added_js))\n+        return Media(css=self.css, js=self.js + list(OrderedDict.fromkeys(added_js)))\n \n     def __add__(self, other):\n         # Combine two Media objects\n         combined_css = self.css.copy()\n         combined_js = self.js.copy()\n         combined_css.update(other.css)  # May have overlap\n         combined_js.extend(other.js)  # Simply extend, duplicates handled after\n \n-        return Media(css=combined_css, js=combined_js)\n+        return Media(css=combined_css, js=list(OrderedDict.fromkeys(combined_js)))\n```\n", "model_name_or_path": "model-1"}, {"instance_id": "django__django-13315", "model_patch": "```diff\ndiff --git a/models.py b/models.py\n--- a/models.py\n+++ b/models.py\n@@ -1,6 +1,6 @@\n from django.db import models\n \n class Character(models.Model):\n-    name = models.CharField(max_length=100)\n+    name = models.CharField(max_length=100, unique=True)\n \n class StumpJoke(models.Model):\n     funniest = models.BooleanField(default=False)\ndiff --git a/forms.py b/forms.py\n--- a/forms.py\n+++ b/forms.py\n@@ -1,4 +1,4 @@\n from django import forms\n from .models import StumpJoke, Character\n \n class StumpJokeForm(forms.ModelForm):\n-    class Meta:\n+    class Meta:\n         model = StumpJoke\n         fields = '__all__'\n```", "model_name_or_path": "model-1"}, {"instance_id": "sympy__sympy-13146", "model_patch": "```diff\ndiff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -227,6 +227,9 @@ def test_evalf_bugs():\n     assert ((oo*I).n() == S.Infinity*I)\n     assert ((oo+oo*I).n() == S.Infinity + S.Infinity*I)\n \n+    #issue 11518\n+    assert simplify(S(1)/2*x**2.5 - S(1)*x**(S(5)/2)/2) == 0\n+\n \n def test_evalf_integer_parts():\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n```", "model_name_or_path": "model-1"}, {"instance_id": "sympy__sympy-23117", "model_patch": "```diff\ndiff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -130,7 +130,7 @@\n     def __new__(cls, iterable, shape=None, **kwargs):\n         # Check for empty input for Array\n         if iterable == []:\n-            raise ValueError(\"Cannot create an Array from an empty iterable\")\n+            return cls.zeros(shape) if shape else cls([])  # Allow creation of empty Arrays\n         return cls._new(iterable, shape, **kwargs)\n \n     @classmethod\n```", "model_name_or_path": "model-1"}]