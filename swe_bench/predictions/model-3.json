[{"instance_id": "pytest-dev__pytest-5495", "model_patch": "```diff\ndiff --git a/testing/test_assertion.py b/testing/test_assertion.py\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -331,6 +331,27 @@ def test_multiline_text_diff(self):\n         assert \"- spam\" in diff\n         assert \"+ eggs\" in diff\n \n+    def test_bytes_diff_normal(self):\n+        \"\"\"Check special handling for bytes diff (#5260)\"\"\"\n+        diff = callequal(b\"spam\", b\"eggs\")\n+\n+        assert diff == [\n+            \"b'spam' == b'eggs'\",\n+            \"At index 0 diff: b's' != b'e'\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_diff_verbose(self):\n+        \"\"\"Check special handling for bytes diff (#5260)\"\"\"\n+        diff = callequal(b\"spam\", b\"eggs\", verbose=True)\n+        assert diff == [\n+            \"b'spam' == b'eggs'\",\n+            \"At index 0 diff: b's' != b'e'\",\n+            \"Full diff:\",\n+            \"- b'spam'\",\n+            \"+ b'eggs'\",\n+        ]\n+\n     def test_list(self):\n         expl = callequal([0, 1], [0, 2])\n         assert len(expl) > 1\n```", "model_name_or_path": "model-3"}, {"instance_id": "django__django-15902", "model_patch": "```diff\ndiff --git a/django/forms/formsets.py b/django/forms/formsets.py\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -25,6 +25,7 @@\n from django.forms.utils import ErrorList\n from django.utils.translation import gettext_lazy as _\n \n+warnings.warn(\"Default management_form template is deprecated.\", PendingDeprecationWarning)\n \n class BaseFormSet:\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n@@ -67,6 +68,7 @@\n \n         # 4. Management form.\n         management_form = self.management_form_auto_id\n        \n+        if 'formset_management_form' not in self.template_name:\n         management_form_template = get_management_form_template(self)\n         management_form = management_form_template.render(Context({\n             'formset': self,\n@@ -162,6 +164,7 @@\n         return management_form\n \n \n class BaseModelFormSet(BaseFormSet):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n+\n```\n", "model_name_or_path": "model-3"}, {"instance_id": "matplotlib__matplotlib-24265", "model_patch": "```diff\ndiff --git a/lib/matplotlib/style/library.py b/lib/matplotlib/style/library.py\n--- a/lib/matplotlib/style/library.py\n+++ b/lib/matplotlib/style/library.py\n@@ -18,6 +18,8 @@ _styles = {\n     'seaborn': 'seaborn',\n     'seaborn-v0_8': 'seaborn-v0_8',\n }\n+_styles['seaborn-colorblind'] = 'seaborn-colorblind'\n+\n \n def use(style):\n     \"\"\"Set the style and update rcParams\"\"\"\n```", "model_name_or_path": "model-3"}, {"instance_id": "matplotlib__matplotlib-23987", "model_patch": "```diff\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -577,7 +577,7 @@ class Figure:\n         self._constrained_layout = False\n         self._constrained_layout_params = {}\n \n-    def set_constrained_layout(self, constrained=True):\n+    def set_constrained_layout(self, constrained=None):\n         \"\"\"\n         Set whether the figure should use constrained layout.\n \n@@ -585,7 +585,7 @@ class Figure:\n             constrained_layout (bool): If True, use constrained layout.\n         \"\"\"\n         if constrained is None:\n-            constrained = True\n+            constrained = False\n \n         if self._constrained_layout != constrained:\n             self._constrained_layout = constrained\n```", "model_name_or_path": "model-3"}, {"instance_id": "django__django-12308", "model_patch": "```diff\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -30,6 +30,9 @@ def display_for_field(value, field, empty_value):\n     if value in (None, ''):\n         return empty_value\n\n+    if isinstance(field, models.JSONField):\n+        return field.prepare_value(value)\n+\n     # Implement the existing logic for other field types\n     ...\n```", "model_name_or_path": "model-3"}, {"instance_id": "pytest-dev__pytest-5413", "model_patch": "```diff\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -123,7 +123,7 @@ class ExceptionInfo:\n         return \"<ExceptionInfo %s tblen=%d>\" % (\n             self.value.__class__.__name__, len(self._tb)\n         )\n-    \n+\n     def __str__(self):\n         return f\"<ExceptionInfo {self.value.__class__.__name__} tblen={len(self._tb)}>\"\n \n```", "model_name_or_path": "model-3"}, {"instance_id": "matplotlib__matplotlib-25442", "model_patch": "```diff\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1514,7 +1514,7 @@ class OffsetImage(Artist):\n \n     @property\n     def canvas(self):\n-        return self.ref_artist.figure.canvas\n+        return self.ref_artist.figure.canvas if self.ref_artist.figure else None\n \n     def set_data(self, data, *args, **kwargs):\n         self._data = data\n```", "model_name_or_path": "model-3"}, {"instance_id": "sympy__sympy-11897", "model_patch": "```diff\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -867,7 +867,7 @@ def test_latex_Piecewise():\n     p = Piecewise((A**2, Eq(A, B)), (A*B, True))\n     s = r\"\\begin{cases} A^{2} & \\text{for}\\: A = B \\\\A B & \\text{otherwise} \\end{cases}\"\n     assert latex(p) == s\n-    assert latex(A*p) == r\"A %s\" % s\n+    assert latex(A*p) == r\"A \\left(%s\\right)\" % s\n     assert latex(p*A) == r\"\\left(%s\\right) A\" % s\n```", "model_name_or_path": "model-3"}, {"instance_id": "django__django-13028", "model_patch": "```diff\ndiff --git a/models.py b/models.py\n--- a/models.py\n+++ b/models.py\n@@ -1,6 +1,6 @@\n from django.db import models\n from django.utils.translation import gettext_lazy as _\n \n-class ProductMetaDataType(models.Model):\n+class ProductMetaDataType(models.Model): \n     label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n-    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+    filterable = models.BooleanField(default=True, verbose_name=_(\"filterable\"))  # Changed default to True\n     class Meta:\n         app_label = \"adminpricing\"\n         verbose_name = _(\"product meta data type\")\n```", "model_name_or_path": "model-3"}, {"instance_id": "sympy__sympy-13437", "model_patch": "```diff\ndiff --git a/sympy/functions/combinatorial/bell.py b/sympy/functions/combinatorial/bell.py\n--- a/sympy/functions/combinatorial/bell.py\n+++ b/sympy/functions/combinatorial/bell.py\n@@ -200,6 +200,11 @@ def bell(n, x=None):\n     if n.is_integer and n < 0:\n         raise ValueError(\"Negative index not allowed for Bell numbers\")\n \n+    if n is oo:\n+        return S.Infinity\n+\n     # Existing implementation...\n```\n", "model_name_or_path": "model-3"}]