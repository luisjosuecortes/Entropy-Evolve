```diff
diff --git a/sympy/core/expr.py b/sympy/core/expr.py
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -124,7 +124,7 @@
     # Convert `other` to a SymPy object; in the process it might raise
     # an exception depending on its type.
     other = sympify(other)
-    expr = eval(code, global_dict, local_dict)  # take local objects in preference
+    if isinstance(other, str):
+        return False
+    expr = eval(code, global_dict, local_dict)  # take local objects in preference
 
     # Compare the two expressions
     return self.equals(expr)
diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py
--- a/sympy/core/tests/test_expr.py
+++ b/sympy/core/tests/test_expr.py
@@ -1903,3 +1903,24 @@ def test_ExprBuilder():
     eb = ExprBuilder(Mul)
     eb.args.extend([x, x])
     assert eb.build() == x**2
+
+def test_non_string_equality():
+    # Expressions should not compare equal to strings
+    x = symbols('x')
+    one = sympify(1)
+    assert (x == 'x') is False
+    assert (x != 'x') is True
+    assert (one == '1') is False
+    assert (one != '1') is True
+    assert (x + 1 == 'x + 1') is False
+    assert (x + 1 != 'x + 1') is True
+
+    # Make sure == doesn't try to convert the resulting expression to a string
+    # (e.g., by calling sympify() instead of _sympify())
+
+    class BadRepr(object):
+        def __repr__(self):
+            raise RuntimeError
+
+    assert (x == BadRepr()) is False
+    assert (x != BadRepr()) is True
```